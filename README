# xv6-thread

이 프로젝트는 MIT의 xv6 운영체제를 기반으로 멀티스레드 기능을 추가 구현한 것입니다.

## 원 프로젝트 정보

이 프로젝트는 [MIT xv6](https://pdos.csail.mit.edu/6.828/2022/xv6.html) 운영체제를 기반으로 합니다. xv6는 Unix v6를 x86 아키텍처에 맞게 재구현한 교육용 운영체제입니다. 

xv6의 소스 코드는 Frans Kaashoek, Robert Morris, Russ Cox가 저작권을 갖고 있습니다. 자세한 내용은 [GitHub 저장소](https://github.com/mit-pdos/xv6-riscv)를 참조하세요.

## 추가 구현 사항

### clone, join 시스템 콜

이 프로젝트에서는 xv6에 clone() 시스템 콜을 추가하여 멀티스레드 기능을 구현했습니다. clone() 시스템 콜은 새로운 스레드를 생성하며, 해당 스레드는 부모 프로세스와 동일한 주소 공간을 공유합니다. 이를 위해 프로세스 구조체에 스레드를 위한 필드(tid, is_thread_parent)를 추가하였으며, allocproc 함수에서 이러한 필드들을 초기화하도록 수정했습니다.

clone() 시스템 콜은 새로운 스레드를 생성하기 위해 현재 프로세스의 주소 공간과 스레드 컨텍스트를 복사합니다. 스택은 독립적인 공간을 가지며, 이를 위해 clone() 호출 시 스택 공간을 매개변수로 전달받아 설정합니다. 이 과정에서 스택 포인터와 베이스 포인터를 적절히 조정하고, 부모 스레드의 스택을 복사하여 새 스레드의 스택을 초기화합니다.

join() 시스템 콜은 현재 프로세스의 자식 스레드가 종료될 때까지 기다렸다가, 해당 스레드를 정리하는 기능을 합니다. 이는 wait() 시스템 콜과 유사하지만, 스레드 간의 동기화에 중점을 둡니다. join() 시스템 콜은 자식 스레드가 종료되면 해당 스레드의 자원을 해제하고, 스레드 ID를 반환합니다. 이를 통해 스레드가 종료될 때까지 부모 스레드가 대기하고, 자원을 적절히 관리할 수 있습니다.

### thread_create, thread_join API

thread_create()는 사용자 레벨에서 스레드를 생성하기 위한 API로, 내부적으로 clone() 시스템 콜을 호출하여 새로운 스레드를 생성합니다. 이 API는 새로운 스레드가 시작할 함수를 매개변수로 받아, 해당 함수를 실행하도록 합니다. 또한, 스레드를 위한 스택을 동적으로 할당하고, 스레드가 종료되면 스택을 해제하는 기능을 포함합니다. 이를 통해 스레드 생성을 간편하게 하고, 자원 관리를 효율적으로 할 수 있습니다.

thread_join()는 특정 스레드가 종료될 때까지 대기하는 API로, 내부적으로 join() 시스템 콜을 호출합니다. 이 API는 주어진 스레드 ID를 인수로 받아 해당 스레드가 종료될 때까지 대기하고, 스레드가 종료되면 0을 반환합니다. 이를 통해 스레드 간의 동기화와 자원 관리를 용이하게 합니다.

### mutex_lock, mutex_unlock 시스템 콜

멀티스레드 환경에서 동기화를 위해 mutex_lock() 및 mutex_unlock() 시스템 콜을 구현했습니다. mutex_lock()은 주어진 락 변수를 사용하여 락을 획득하려 시도하며, 실패하면 해당 스레드가 락을 획득할 때까지 대기합니다. mutex_unlock()은 락을 해제하고, 대기 중인 스레드를 깨웁니다. 이를 통해 스레드 간의 상호 배제를 보장하고, 동기화 문제를 해결할 수 있습니다.
